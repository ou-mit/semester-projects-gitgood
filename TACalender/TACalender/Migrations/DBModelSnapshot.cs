// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TACalender;

#nullable disable

namespace TACalender.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("TACalender.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumSections")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subject")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TACalender.Educator", b =>
                {
                    b.Property<int>("EduID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumSection")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OUEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PrefName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EduID");

                    b.ToTable("Educators");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Educator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TACalender.Request", b =>
                {
                    b.Property<int>("RID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EduID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TAEduID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weekday")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("timeOfRequest")
                        .HasColumnType("TEXT");

                    b.HasKey("RID");

                    b.HasIndex("TAEduID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TACalender.Section", b =>
                {
                    b.Property<int>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EduID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumTas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("SectionID");

                    b.HasIndex("CourseID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("TACalender.SectionTA", b =>
                {
                    b.Property<int>("SecTAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TAID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SecTAID");

                    b.HasIndex("SectionID");

                    b.HasIndex("TAID");

                    b.ToTable("SectionTAs");
                });

            modelBuilder.Entity("TACalender.TATask", b =>
                {
                    b.Property<int>("TATaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Cancel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EduID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TAEduID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskTID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.HasKey("TATaskID");

                    b.HasIndex("TAEduID");

                    b.HasIndex("TaskTID");

                    b.ToTable("TATasks");
                });

            modelBuilder.Entity("TACalender.Task", b =>
                {
                    b.Property<int>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndTimeTimeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartTimeTimeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weekday")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TID");

                    b.HasIndex("EndTimeTimeID");

                    b.HasIndex("StartTimeTimeID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TACalender.Time", b =>
                {
                    b.Property<int>("TimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AMorPM")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("TimeID");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("TACalender.Instructor", b =>
                {
                    b.HasBaseType("TACalender.Educator");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("TACalender.TA", b =>
                {
                    b.HasBaseType("TACalender.Educator");

                    b.HasDiscriminator().HasValue("TA");
                });

            modelBuilder.Entity("TACalender.Request", b =>
                {
                    b.HasOne("TACalender.TA", null)
                        .WithMany("Requests")
                        .HasForeignKey("TAEduID");
                });

            modelBuilder.Entity("TACalender.Section", b =>
                {
                    b.HasOne("TACalender.Course", null)
                        .WithMany("Sections")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TACalender.SectionTA", b =>
                {
                    b.HasOne("TACalender.Section", null)
                        .WithMany("SectionTAList")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TACalender.TA", null)
                        .WithMany("SectionTAList")
                        .HasForeignKey("TAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TACalender.TATask", b =>
                {
                    b.HasOne("TACalender.TA", null)
                        .WithMany("TATask")
                        .HasForeignKey("TAEduID");

                    b.HasOne("TACalender.Task", null)
                        .WithMany("TATask")
                        .HasForeignKey("TaskTID");
                });

            modelBuilder.Entity("TACalender.Task", b =>
                {
                    b.HasOne("TACalender.Time", "EndTime")
                        .WithMany()
                        .HasForeignKey("EndTimeTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TACalender.Time", "StartTime")
                        .WithMany()
                        .HasForeignKey("StartTimeTimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndTime");

                    b.Navigation("StartTime");
                });

            modelBuilder.Entity("TACalender.Course", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("TACalender.Section", b =>
                {
                    b.Navigation("SectionTAList");
                });

            modelBuilder.Entity("TACalender.Task", b =>
                {
                    b.Navigation("TATask");
                });

            modelBuilder.Entity("TACalender.TA", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("SectionTAList");

                    b.Navigation("TATask");
                });
#pragma warning restore 612, 618
        }
    }
}
